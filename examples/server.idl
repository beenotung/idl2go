#include "shared.idl"

module demo {
  module server {

    typedef sequence<string> StringSeq;
    typedef sequence<block> BlockSeq;

    // route: /transaction
    interface TransactionHandler {

      // POST: /create
      void createTransaction(in newDataContainer NewDataContainer) raises(OutOfSpace, AuthError);

      // POST: /update
      void updateTransaction(in dataContainer DataContainer) raises(OutOfSpace, NotFound, AuthError);

      // GET: /get/:TxId
      dataContainer getData(in transactionId TxId) raises(NotFound, NetworkError);

      // POST: /expire
      void expireData(in expire Expire) raises(NotFound, OutOfSpace, NetworkError, AuthError);

    };

    // route: /user
    interface UserHandler {

      // GET: /searchGroupByName/:GroupName
      GroupSeq searchGroupByName(in string GroupName);

      // raises NotFound when the Group doesn't exist
      // GET: /searchUserByGroup/:GroupId/:UserName
      UserSeq searchUserByGroup(in transactionId GroupId, in string UserName) raises(NotFound);

      // GET: /getUserPublicKey/:UserId
      pubKey getUserPublicKey(in transactionId UserId) raises(NotFound);

      // GET: /verifySignature/:Hash/UserId
      boolean verifySignature(in base64 Hash, in transactionId UserId) raises(NotFound); // return true if valid, false if not.

    };

    // route: /block
    interface BlockHandler {

      // GET: /show/:Height
      block showBlock(in unsigned long long Height) raises(NetworkError);

      // GET: /showAll
      BlockSeq showBlocks() raises(NetworkError);

      // GET: /height
      unsigned long long getHeight() raises(NetworkError);

    };

  };
};
